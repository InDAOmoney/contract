
// SPDX-License-Identifier: AGPL-3.0-or-later
pragma solidity 0.7.5;

interface IERC20 {

    function totalSupply() external view returns (uint256);

    function balanceOf(address account) external view returns (uint256);

    function transfer(address recipient, uint256 amount) external returns (bool);

    function allowance(address owner, address spender) external view returns (uint256);

    function approve(address spender, uint256 amount) external returns (bool);

    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);

    event Transfer(address indexed from, address indexed to, uint256 value);

    event Approval(address indexed owner, address indexed spender, uint256 value);
}

library SafeMath {

    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        require(c >= a, "SafeMath: addition overflow");

        return c;
    }

    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        return sub(a, b, "SafeMath: subtraction overflow");
    }

    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b <= a, errorMessage);
        uint256 c = a - b;

        return c;
    }

    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }

        uint256 c = a * b;
        require(c / a == b, "SafeMath: multiplication overflow");

        return c;
    }

    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        return div(a, b, "SafeMath: division by zero");
    }

    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {
        require(b > 0, errorMessage);
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold

        return c;
    }
}

library Address {
    function isContract(address account) internal view returns (bool) {
        uint256 size;
        // solhint-disable-next-line no-inline-assembly
        assembly {size := extcodesize(account)}
        return size > 0;
    }

    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {
        return _functionCallWithValue(target, data, 0, errorMessage);
    }

    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {
        require(isContract(target), "Address: call to non-contract");

        // solhint-disable-next-line avoid-low-level-calls
        (bool success, bytes memory returndata) = target.call{value : weiValue}(data);
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }

    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns (bytes memory) {
        if (success) {
            return returndata;
        } else {
            if (returndata.length > 0) {
                // solhint-disable-next-line no-inline-assembly
                assembly {
                    let returndata_size := mload(returndata)
                    revert(add(32, returndata), returndata_size)
                }
            } else {
                revert(errorMessage);
            }
        }
    }

}

library SafeERC20 {
    using SafeMath for uint256;
    using Address for address;

    function safeTransfer(IERC20 token, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));
    }

    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {
        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));
    }

    function _callOptionalReturn(IERC20 token, bytes memory data) private {
        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");
        if (returndata.length > 0) {// Return data is optional
            // solhint-disable-next-line max-line-length
            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");
        }
    }
}

interface IOwnable {

    function owner() external view returns (address);

    function renounceOwnership() external;

    function transferOwnership(address newOwner_) external;
}

contract Ownable is IOwnable {

    address internal _owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    constructor () {
        _owner = msg.sender;
        emit OwnershipTransferred(address(0), _owner);
    }

    function owner() public view override returns (address) {
        return _owner;
    }

    modifier onlyOwner() {
        require(_owner == msg.sender, "Ownable: caller is not the owner");
        _;
    }

    function renounceOwnership() public virtual override onlyOwner() {
        emit OwnershipTransferred(_owner, address(0));
        _owner = address(0);
    }

    function transferOwnership(address newOwner_) public virtual override onlyOwner() {
        require(newOwner_ != address(0), "Ownable: new owner is the zero address");
        emit OwnershipTransferred(_owner, newOwner_);
        _owner = newOwner_;
    }
}

interface IWETH {
    function deposit() external payable;
}

contract Invite is Ownable {
    using SafeMath for uint;
    using SafeERC20 for IERC20;

    address public DAOAddress;
    address public WBNB;

    uint256 public salePrice;
    uint256 public nodeNum;
    uint256 public saleNodeNum;
    bool public saleStarted;
    bool public whiteStatus;

    uint256 public rate;
    uint256 public denominator;
    uint256 public bondRate;
    uint256 public bondRewardRate;

    address public sToken;

    mapping(address => uint256) public stakingUserGons;

    mapping(address => uint256) public stakingNodeGons;

    mapping(address => uint256) public bondNodeAmount;

    mapping(address => uint256) public bondNodeUAmount;

    mapping(address => address) public superiorAddress;

    mapping(address => address) public nodeTeams;

    mapping(address => bool) public nodeAddress;

    mapping(uint256 => address) public sortNodeAddress;

    mapping(address => bool) public memberAddress;

    mapping(address => uint256) public bondSuperiorReward;

    mapping(address => bool) public bondAddress;

    mapping(address => uint256) public bondUserAmuont;

    mapping(address => uint256) public bondUserPendingAmount;

    mapping(address => bool) public whiteListed;

    constructor(address _DAOAddress,
        address _WBNB,
        uint256 _salePrice,
        uint256 _nodeNum,
        uint256 _saleNodeNum,
        bool _saleStarted,
        uint256 _rate,
        uint256 _denominator,
        uint256 _bondRate,
        uint256 _bondRewardRate
    ) {
        DAOAddress = _DAOAddress;
        WBNB = _WBNB;
        salePrice = _salePrice;
        nodeNum = _nodeNum;
        saleNodeNum = _saleNodeNum;
        saleStarted = _saleStarted;
        rate = _rate;
        denominator = _denominator;
        bondRate = _bondRate;
        bondRewardRate = _bondRewardRate;
    }


    function purchaseaNode() external payable returns (bool) {
        uint256 amount =  msg.value;
        require(nodeAddress[msg.sender] == false, "Already participated");
        require(nodeNum >= saleNodeNum, "Sale over");
        require(saleStarted == true, 'Not started');
        require(amount == salePrice, 'Wrong amount');
        if(whiteStatus == true) require(whiteListed[msg.sender] == true, 'Not whitelisted');

        if(stakingUserGons[msg.sender] > 0
            &&  nodeTeams[msg.sender] != address(0))
            _gonsUpdate( nodeTeams[msg.sender],
                msg.sender,
                stakingUserGons[msg.sender]);

        nodeAddress[msg.sender] = true;
        sortNodeAddress[saleNodeNum] = msg.sender;
        memberAddress[msg.sender] = true;
        nodeTeams[msg.sender] = msg.sender;
        IWETH(WBNB).deposit{value : amount}();

        if(rate > 0 && superiorAddress[msg.sender] != address(0)){
            uint256 _rateAmount = salePrice.mul(rate).div(denominator);
            IERC20(WBNB).safeTransfer(superiorAddress[msg.sender], _rateAmount);
            IERC20(WBNB).safeTransfer(DAOAddress, salePrice.sub(_rateAmount));
            delete nodeTeams[msg.sender];
        }else{
            IERC20(WBNB).safeTransfer(DAOAddress, salePrice);
        }
        saleNodeNum++;
        return true;
    }

    function inviteAddress(address _superiorAddress) external returns (bool) {
        require(memberAddress[_superiorAddress] == true, "Not superAddress");
        require(memberAddress[msg.sender] == false, "Not superAddress");
        memberAddress[msg.sender] = true;
        superiorAddress[msg.sender] = _superiorAddress;
        nodeTeams[msg.sender] = nodeTeams[_superiorAddress];
        return true;
    }

    function buyBond(address _userAddress,uint256 _bondAmount,uint256 _UAmount)external returns(address _superiorAddress,
        uint256 _userAmount,
        uint256 _rewardAmount) {
        require(bondAddress[msg.sender] == true, "Not bond");
        if(memberAddress[_userAddress] == true){
            address nodeAdd = nodeTeams[_userAddress];
            _superiorAddress = superiorAddress[_userAddress];
            _rewardAmount = _bondAmount.mul(bondRewardRate).div(denominator);
            if(bondRate != 0){

                uint256 _bondUserAmuont = _bondAmount.mul(bondRate).div(denominator);
                uint256 _userPendingAmount = bondUserPendingAmount[_userAddress];
                if(_userPendingAmount > 0 ){
                    if(_userPendingAmount >= _bondUserAmuont){
                        _userAmount = _bondUserAmuont;
                        bondUserPendingAmount[_userAddress] = _userPendingAmount.sub(_bondUserAmuont);
                    }else{
                        bondUserPendingAmount[_userAddress] = 0;
                        _userAmount = _userPendingAmount;
                        bondUserAmuont[_userAddress] = _bondUserAmuont.sub(_userPendingAmount);
                    }
                }else{
                    bondUserAmuont[_userAddress] = bondUserAmuont[_userAddress].add(_bondUserAmuont);
                }

                uint256 _bondSuperiorAmount = bondUserAmuont[_superiorAddress];
                if(_bondSuperiorAmount > 0){
                    if(_bondSuperiorAmount >= _rewardAmount){
                        bondUserAmuont[_superiorAddress] = _bondSuperiorAmount.sub(_rewardAmount);
                    }else{
                        bondUserAmuont[_superiorAddress] = 0 ;
                        bondUserPendingAmount[_superiorAddress] = _rewardAmount.sub(_bondSuperiorAmount);
                        _rewardAmount = _bondSuperiorAmount;
                    }
                }else{
                    bondUserPendingAmount[_superiorAddress] = bondUserPendingAmount[_superiorAddress].add(_rewardAmount);
                    _rewardAmount = 0;
                }
            }
            bondNodeAmount[nodeAdd] = bondNodeAmount[nodeAdd].add(_bondAmount);
            bondNodeUAmount[nodeAdd] = bondNodeUAmount[nodeAdd].add(_UAmount);
        }
    }

    function gonsUpdate( address _userAddress,uint256 _gonsAmouns) external{
        require(msg.sender == sToken, "Not sToken");
        if(memberAddress[_userAddress] == true){
            uint256 _stakingUserGons = stakingUserGons[_userAddress];
            address nodeAdd = nodeTeams[_userAddress];
            if(_stakingUserGons > 0){
                if(_stakingUserGons >= _gonsAmouns){
                    stakingNodeGons[nodeAdd] = stakingNodeGons[nodeAdd].sub(_stakingUserGons.sub(_gonsAmouns));
                }else{
                    stakingNodeGons[nodeAdd] = stakingNodeGons[nodeAdd].add(_gonsAmouns.sub(_stakingUserGons));
                }
            }else{
                stakingNodeGons[nodeAdd] = stakingNodeGons[nodeAdd].add(_gonsAmouns);
            }
            stakingUserGons[_userAddress] = _gonsAmouns;
        }
    }

    function _gonsUpdate( address _superiorAddress, address _userAddress,uint256 _gonsAmouns) internal {
        stakingNodeGons[_superiorAddress] = stakingNodeGons[_superiorAddress].sub(_gonsAmouns);
        stakingNodeGons[_userAddress] = stakingNodeGons[_userAddress].add(_gonsAmouns);
    }

    function withdraw(address _token) external onlyOwner() {
        uint256 amount = IERC20(_token).balanceOf(address(this));
        IERC20(_token).transfer(msg.sender, amount);
    }

    function setStart() external onlyOwner() {
        saleStarted = !saleStarted;
    }

    function setWhiteStatus() external onlyOwner() {
        whiteStatus = !whiteStatus;
    }

    function nodeNumAdd(uint256 _num) external onlyOwner() {
        nodeNum += _num;
    }

    function addBondAddress(address _bondAddress) external onlyOwner() {
        bondAddress[_bondAddress] = true;
    }

    function removeBondAddress(address _bondAddress) external onlyOwner() {
        delete bondAddress[_bondAddress];
    }

    function setSalePrice(uint256 _salePrice) external onlyOwner() {
        salePrice = _salePrice;
    }

    function setSToken(address _sToken) external onlyOwner() {
        sToken = _sToken;
    }

    function setRate(uint256 _rate) external onlyOwner() {
        rate = _rate;
    }

    function setBondRate(uint256 _bondRate) external onlyOwner() {
        bondRate = _bondRate;
    }

    function setBondRewardRate(uint256 _bondRewardRate) external onlyOwner() {
        bondRewardRate = _bondRewardRate;
    }

    function whiteListBuyers(address[] memory _buyers) external onlyOwner() {
        for (uint i; i < _buyers.length; i++) {
            whiteListed[_buyers[i]] = true;
        }
    }
}
